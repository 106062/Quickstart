# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /home/minato/termigif/jkscc/shell
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 138
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 51
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 100
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: Terminalizer
    style:
      border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 12
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 1170
    content: "\e[1;34mminato\e[m @ \e[1;34m~/termigif/jkscc/shell\e[1;30m on\e[0;36m ⎇  master\e[0m $ "
  - delay: 474
    content: l
  - delay: 127
    content: e
  - delay: 216
    content: s
  - delay: 159
    content: s
  - delay: 144
    content: ' '
  - delay: 766
    content: i
  - delay: 312
    content: 'n'
  - delay: 262
    content: 'stall.sh '
  - delay: 482
    content: "\r\n"
  - delay: 10
    content: "\e[?1049h\e[22;0;0t\e[?1h\e=\r#!/bin/bash\r\n\r\n## create namespace\r\necho '===> create namespace' $1\r\nkubectl create namespace $1\r\n\r\n## helm add repo jenkins\r\n#helm repo add jenkins https://charts.jenkins.io\r\n\r\n## install jenkins in newnamespace\r\necho '===> install jenkins in' $1\r\nhelm install jenkins jenkins/jenkins -n $1 --set service.type=ClusterIP --values ./jks.yaml\r\n\r\n## get secert with admin pwd\r\necho '===> admin secret is '\r\necho $(kubectl get secret --namespace $1 jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode)\r\n\r\n## check all svc under ns\r\nkubectl get all -n $1\r\n\r\n## set svc to get public ip\r\nkubectl patch svc jenkins -n $1 -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\r\n\r\n\e[7minstall.sh (END)\e[27m\e[K"
  - delay: 1798
    content: "\r\e[K\e[?1l\e>\e[?1049l\e[23;0;0t"
  - delay: 6
    content: "\e[1;34mminato\e[m @ \e[1;34m~/termigif/jkscc/shell\e[1;30m on\e[0;36m ⎇  master\e[0m $ "
  - delay: 1830
    content: c
  - delay: 106
    content: a
  - delay: 249
    content: t
  - delay: 104
    content: ' '
  - delay: 2549
    content: j
  - delay: 172
    content: k
  - delay: 137
    content: 's.yaml '
  - delay: 440
    content: "\r\ncontroller:\r\n  JCasC:\r\n    enabled: true\r\n    defaultConfig: true\r\n  installPlugins:\r\n    - kubernetes:1.29.0\r\n    - credentials-binding:1.24\r\n    - git:4.5.2\r\n    - configuration-as-code:1.47\r\n    - ssh-agent:1.21\r\n"
  - delay: 5
    content: "\e[1;34mminato\e[m @ \e[1;34m~/termigif/jkscc/shell\e[1;30m on\e[0;36m ⎇  master\e[0m $ "
  - delay: 1620
    content: .
  - delay: 107
    content: /
  - delay: 727
    content: i
  - delay: 223
    content: 'nstall.sh '
  - delay: 1012
    content: a
  - delay: 205
    content: a
  - delay: 168
    content: a
  - delay: 729
    content: "\r\n===> create namespace aaa\r\n"
  - delay: 608
    content: "namespace/aaa created\r\n===> install jenkins in aaa\r\n"
  - delay: 23745
    content: "NAME: jenkins\r\nLAST DEPLOYED: Thu Mar 11 17:26:53 2021\r\nNAMESPACE: aaa\r\nSTATUS: deployed\r\nREVISION: 1\r\nNOTES:\r\n1. Get your 'admin' user password by running:\r\n  kubectl exec --namespace aaa -it svc/jenkins -c jenkins -- /bin/cat /run/secrets/chart-admin-password && echo\r\n2. Get the Jenkins URL to visit by running these commands in the same shell:\r\n  echo http://127.0.0.1:8080\r\n  kubectl --namespace aaa port-forward svc/jenkins 8080:8080\r\n\r\n3. Login with the password from step 1 and the username: admin\r\n4. Configure security realm and authorization strategy\r\n5. Use Jenkins Configuration as Code by specifying configScripts in your values.yaml file, see documentation: http:///configuration-as-code and examples: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos\r\n\r\nFor more information on running Jenkins on Kubernetes, visit:\r\nhttps://cloud.google.com/solutions/jenkins-on-container-engine\r\n\r\nFor more information about Jenkins Configuration as Code, visit:\r\nhttps://jenkins.io/projects/jcasc/\r\n\r\n\r\nNOTE: Consider using a custom image with pre-installed plugins\r\n===> admin secret is \r\n"
  - delay: 576
    content: "fB0ZVXHYTP1gtMIewyi2mb\r\n"
  - delay: 4978
    content: "NAME            READY   STATUS     RESTARTS   AGE\r\npod/jenkins-0   0/2     Init:0/1   0          5s\r\n\r\nNAME                    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)     AGE\r\nservice/jenkins         ClusterIP   10.8.10.240   <none>        8080/TCP    6s\r\nservice/jenkins-agent   ClusterIP   10.8.12.104   <none>        50000/TCP   6s\r\n\r\nNAME                       READY   AGE\r\nstatefulset.apps/jenkins   0/1     8s\r\n"
  - delay: 735
    content: "service/jenkins patched\r\n"
  - delay: 7
    content: "\e[1;34mminato\e[m @ \e[1;34m~/termigif/jkscc/shell\e[1;30m on\e[0;36m ⎇  master\e[0m $ "
  - delay: 5061
    content: w
  - delay: 79
    content: a
  - delay: 330
    content: t
  - delay: 277
    content: c
  - delay: 276
    content: h
  - delay: 81
    content: ' '
  - delay: 2479
    content: g
  - delay: 512
    content: e
  - delay: 415
    content: "\b\e[K"
  - delay: 149
    content: "\b\e[K"
  - delay: 211
    content: k
  - delay: 502
    content: u
  - delay: 163
    content: b
  - delay: 194
    content: e
  - delay: 252
    content: c
  - delay: 677
    content: "\atl"
  - delay: 431
    content: g
  - delay: 441
    content: "\b\e[K"
  - delay: 150
    content: ' '
  - delay: 139
    content: g
  - delay: 142
    content: e
  - delay: 202
    content: t
  - delay: 259
    content: ' '
  - delay: 184
    content: a
  - delay: 487
    content: l
  - delay: 151
    content: l
  - delay: 161
    content: ' '
  - delay: 617
    content: '-'
  - delay: 208
    content: 'n'
  - delay: 115
    content: ' '
  - delay: 403
    content: a
  - delay: 146
    content: a
  - delay: 144
    content: a
  - delay: 3820
    content: "\r\n"
  - delay: 2321
    content: "\e[?1049h\e[22;0;0t\e[1;51r\e(B\e[m\e[4l\e[?7h\e[H\e[2JEvery 2.0s: kubectl get all -n aaa\e[1;105HTV6655NB: Thu Mar 11 17:27:33 2021\e[3;1HNAME\e[3;17HREADY   STATUS\e[3;43HRESTARTS   AGE\r\e[4dpod/jenkins-0   0/2     PodInitializing   0\e[4;54H30s\r\e[6dNAME\e[6;25HTYPE\e[6;40HCLUSTER-IP    EXTERNAL-IP   PORT(S)\e[6;85HAGE\r\e[7dservice/jenkins\e[7;25HLoadBalancer   10.8.10.240   <pending>     8080:30028/TCP   30s\r\e[8dservice/jenkins-agent   ClusterIP\e[40G10.8.12.104   <none>\e[8;68H50000/TCP\e[8;85H30s\r\e[10dNAME\e[10;28HREADY   AGE\r\e[11dstatefulset.apps/jenkins   0/1     31s\e[51;138H"
  - delay: 4161
    content: "\e[1;133H7\e[3;31H\e[8P\e[4;17H1\e[25GRunning   0          34s\e[K\e[7;86H5\e[8d\b5\e[11;37H5\e[51;138H"
  - delay: 4845
    content: "\e[1;132H42\e[4;47H8\e[6;65H    PORT(S)\e[6;85H AGE\e[7;54H34.71.27.122   8080:30028/TCP   39s\e[8;68H 50000/TCP\e[85G 39s\e[11;37H9\e[51;138H"
  - delay: 4336
    content: "\e[1;133H6\e[4;46H43\e[7;86H44\e[8d\b\b44\e[11;36H44\e[51;138H"
  - delay: 4398
    content: "\e[1;132H51\e[4;47H8\e[7;87H8\e[8d\b8\e[11;37H9\e[51;138H"
  - delay: 5587
    content: "\e[1;133H5\e[4;46H52\e[7;86H53\e[8d\b\b53\e[11;36H54\e[51;138H"
  - delay: 4317
    content: "\e[1;130H8:01\e[4;47H7\e[7;87H8\e[8d\b8\e[11;37H9\e[51;138H"
  - delay: 4241
    content: "\e[1;133H5\e[4;46H62\e[7;86H62\e[8d\b\b62\e[11;36H63\e[51;138H"
  - delay: 2988
    content: "\e[51;1H\e[?1049l\e[23;0;0t\r\e[?1l\e>"
  - delay: 13
    content: "\e[1;34mminato\e[m @ \e[1;34m~/termigif/jkscc/shell\e[1;30m on\e[0;36m ⎇  master\e[0m $ "
  - delay: 4795
    content: "logout\r\n"
